import java.util.Set;
import java.util.TreeSet;
import java.lang.Integer;
import java.util.HashMap;

aspect Interpreter {
    public class ActivationRecord {
        protected HashMap variableList;

		public ActivationRecord() {
			variableList = new HashMap();
		}

        public Integer get(String var) {
			return (Integer) variableList.get(var);
		}

		public void put(String var, Integer val) {
			variableList.put(var, val);
		}

        // public boolean returnval(){
        //     return variableList.get("return") != null;
        // }
    }
    
    protected ActivationRecord ASTNode.create() {
		return new ActivationRecord();
	}
    public void Program.eval(){
        for (Function f: getFunctions()){
            if(f.getIdDecl().getID().equals("main")){
                f.eval(create());
            }
            else{
                f.eval(null);
            }
        }
    }
    public int Function.eval(ActivationRecord actrec){
        if (lookup("main") == unknownDecl()){
            throw new RuntimeException("no main function");
        }
        else if(actrec != null){
            for (Statement s: getStatements()){
                s.eval(actrec);
                if(actrec.get("return") != null){
                    return actrec.get("return");
                }
            }
        }
        return 0;
    }
    abstract public void Statement.eval(ActivationRecord actrec);

    public void Declaration.eval(ActivationRecord actrec){
        if(hasExpression()){
            actrec.put(getIdDecl().UniqueName(), getExpression().eval(actrec));
        }
        else{
            actrec.put(getIdDecl().UniqueName(), 0);
        }
    }
    public void Binding.eval(ActivationRecord actrec){
        actrec.put(getIdUse().getID(), getExpression().eval(actrec));
    }
    public void ReturnState.eval(ActivationRecord actrec){
        actrec.put("return", getExpression().eval(actrec));
        System.out.println("returning " + actrec.get("return"));
    }
    public void FunctionCallStmt.eval(ActivationRecord actrec){
        if (getFunctionCall().getIdUse().getID().equals("print")){
            for (Expression e: getFunctionCall().getExpressions()){
                System.out.println(e.eval(actrec));
            }
        }
        else {
            getFunctionCall().eval(actrec);
        }
    }
    public void If.eval(ActivationRecord actrec){
        if (getExpression().eval(actrec)==1){
            for (Statement s: getStatements()){
                s.eval(actrec);
                if(actrec.get("return") != 0){
                    return;
                }
            }
        }
        else if (hasElse()){
            getElse().eval(actrec);
        }
    }
    public void While.eval(ActivationRecord actrec){
        if (getExpression().eval(actrec)==1){
            for (Statement s: getStatements()){
                s.eval(actrec);
                if(actrec.get("return") != 0){
                    return;
                }
            }
        }
    }
    public void Else.eval(ActivationRecord actrec){
        for (Statement s: getStatements()){
            s.eval(actrec);
        }
    }
    
    abstract int Expression.eval(ActivationRecord actrec);

    public int BinaryExpression.eval(ActivationRecord actrec){
        return 0;
    }
    public int Sum.eval(ActivationRecord actrec){
        return getLeft().eval(actrec) + getRight().eval(actrec);
    } 
    public int Sub.eval(ActivationRecord actrec){
        return getLeft().eval(actrec) - getRight().eval(actrec);
    }
    public int Mul.eval(ActivationRecord actrec){
        return getLeft().eval(actrec) * getRight().eval(actrec);
    }
    public int Div.eval(ActivationRecord actrec){
        return getLeft().eval(actrec) / getRight().eval(actrec);
    }
    public int Mod.eval(ActivationRecord actrec){
        return getLeft().eval(actrec) % getRight().eval(actrec);
    }
    public int Comparison.eval(ActivationRecord actrec){
        return 0;
    }
    public int LessThan.eval(ActivationRecord actrec){
        return getLeft().eval(actrec) < getRight().eval(actrec) ? 1 : 0;
    }
    public int LessThanEqual.eval(ActivationRecord actrec){
        return getLeft().eval(actrec) <= getRight().eval(actrec) ? 1 : 0;
    }
    public int GreaterThan.eval(ActivationRecord actrec){
        return getLeft().eval(actrec) > getRight().eval(actrec) ? 1 : 0;
    }
    public int GreaterThanEqual.eval(ActivationRecord actrec){
        return getLeft().eval(actrec) >= getRight().eval(actrec) ? 1 : 0;
    }
    public int NotEquals.eval(ActivationRecord actrec){
        return getLeft().eval(actrec) != getRight().eval(actrec) ? 1 : 0;
    }
    public int Equals.eval(ActivationRecord actrec){
        return getLeft().eval(actrec) == getRight().eval(actrec) ? 1 : 0;
    }
    public int FunctionCall.eval(ActivationRecord actrec){  
        Function f = getIdUse().decl().function();
        String[] arguments = new String[f.getNumArgument()];
        for (int i = 0; i < f.getNumArgument(); i++){
            arguments[i] = f.getArgument(i).getIdDecl().getID();
        }
        //using the variables thing attatch argument ids to the values of the expressions
        ActivationRecord fcactrec = create();
        int i = 0;
        for (Expression e: getExpressions()){
            fcactrec.put(arguments[i], e.eval(actrec));
            i++;
        }
        return f.eval(fcactrec);
    }
    public int Parenthesis.eval(ActivationRecord actrec){
        return getExpression().eval(actrec);
    }
    public int Minus.eval(ActivationRecord actrec){
        return  -(getExpression().eval(actrec));
    }
    public int IdUse.eval(ActivationRecord actrec){
        return actrec.get(getID());
    }
    public int Nbr.eval(ActivationRecord actrec){
        return Integer.valueOf(getNUM());
    }
}