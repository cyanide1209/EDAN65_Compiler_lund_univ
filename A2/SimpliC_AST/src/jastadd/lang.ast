Program ::= Function*;

Function ::= IdDecl Argument* Statement*;
Argument ::= IdDecl;


abstract Statement;
Binding:Statement ::= IdUse Expression;
Declaration:Statement ::= IdDecl [Expression];
ReturnState:Statement ::= Expression;
FunctionCallStmt:Statement ::= FunctionCall;
If:Statement ::= Expression Statement* [Else];
Else ::= Statement*;
While:Statement ::= Expression Statement*;

IdDecl ::= <ID>;

abstract Expression;
Comparison:Expression ::= left:Term right:Term;
LessThan:Comparison;
LessThanEqual:Comparison;
GreaterThan:Comparison;
GreaterThanEqual:Comparison;
Equals:Comparison;
NotEquals:Comparison;

abstract Term:Expression;
binaryExpression:Term ::= left:Term right:Term;
Sum:binaryExpression;
Sub:binaryExpression;
Mul:binaryExpression;
Div:binaryExpression;
Mod:binaryExpression;

abstract Firstprio:Term;
FunctionCall:Firstprio ::= IdUse Term*;
Minus:Firstprio ::= Firstprio;
Parenthesis:Firstprio ::= Expression;
IdUse:Firstprio ::= <ID>;
Nbr:Firstprio ::= <NUM>;



