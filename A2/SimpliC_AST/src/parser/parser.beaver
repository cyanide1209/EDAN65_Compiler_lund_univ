%class "LangParser";
%package "lang.ast";

%embed {:
	static public class SyntaxError extends RuntimeException { public SyntaxError(String msg) {super(msg);}}
	// Disable syntax error recovery
	protected void recoverFromError(Symbol token, TokenStream in) {
		throw new SyntaxError("Cannot recover from the syntax error");
	}
:};

%terminals ID,LEFTPARA, RIGHTPARA, LEFTCURLYBRACE, RIGHTCURLYBRACE, INT, ASSIGN, SEMICOLON, NUM;

%typeof program = "Program";
%typeof function = "Function";
%typeof functionID = "FunctionID";
%typeof function_list = "List";

%typeof declr = "Declaration";
%typeof id_use = "IdUse";
%typeof id_decl = "IdDecl";
%typeof binding = "Binding";

%typeof asgnright = "AssigmentRight";
%typeof value = "Value";
%typeof nbr = "Nbr";

%typeof expr = "Expression";
%typeof expr_list = "List";
%typeof codeblock = "CodeBlock";

%goal program;

program = function_list.a {: return new Program(a); :};
function = INT functionID.a LEFTPARA RIGHTPARA codeblock.b {: return new Function(a,b); :};

function_list = function.a {: return new List().add(a); :} 
| function_list.a function.b {: return a.add(b); :};

declr = INT id_decl.a SEMICOLON{:return new Declaration(a); :};
binding = id_use.a ASSIGN value.b SEMICOLON {: return new Binding(a,b); :};
expr = declr | binding;
expr_list = expr.a {: return new List().add(a); :} 
| expr_list.a expr.b {: return a.add(b); :};

codeblock = LEFTCURLYBRACE RIGHTCURLYBRACE{: return new CodeBlock(); :}
| LEFTCURLYBRACE expr_list.a RIGHTCURLYBRACE{: return new CodeBlock(new Opt(a)); :}; 

value = asgnright;
asgnright = nbr | id_use;

nbr = NUM.a{: return new Nbr(a); :};
id_use = ID.id {: return new IdUse(id); :} ;
functionID = ID.id {: return new FunctionID(id); :};
id_decl = ID.id {: return new IdDecl(id); :} ;