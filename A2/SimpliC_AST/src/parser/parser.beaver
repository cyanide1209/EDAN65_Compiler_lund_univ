%class "LangParser";
%package "lang.ast";

%embed {:
	static public class SyntaxError extends RuntimeException { public SyntaxError(String msg) {super(msg);}}
	// Disable syntax error recovery
	protected void recoverFromError(Symbol token, TokenStream in) {
		throw new SyntaxError("Cannot recover from the syntax error");
	}
:};

%terminals ID,LEFTPARA, RIGHTPARA, LEFTCURLYBRACE, RIGHTCURLYBRACE, INT, ASSIGN, SEMICOLON, NUM, ADD, MINUS, DIV, MUL, MOD;
%terminals GREATERTHAN, GREATERTHANEQUAL, LESSTHAN, LESSTHANEQUAL, EQUALS, NOTEQUALS, ARGUMENT, RETURN, COMMENT, WHILE, COMMA;
%typeof program = "Program";
%typeof function = "Function";
%typeof function_list = "List";
%typeof argument = "Argument";
%typeof argument_list = "List";

%typeof expr = "Expression";
%typeof expr_list = "List";
%typeof declr = "Declaration";
%typeof binding = "Binding";
%typeof if = "If";
%typeof else = "Else";
%typeof while = "While";
%typeof returnstmt = "ReturnState";
%typeof functioncallstmt = "FunctionCallStmt";

%typeof term = "Term";
%typeof variable = "Variable";
%typeof functioncall = "FunctionCall";
%typeof sum = "Sum";
%typeof sub = "Sub";
%typeof lowprio = "Lowprio";
%typeof div = "Div";
%typeof mul = "Mul";
%typeof mod = "Mod";
%typeof firstprio = "Firstprio";

%typeof compare = "Comparison";
%typeof equals = "Equals";
%typeof notequals = "NotEquals";
%typeof lessthan = "LessThan";
%typeof lessthaneqaul = "LessThanEqual";
%typeof greaterthan = "GreaterThan";
%typeof greaterthanequal = "GreaterThanEqual";
%typeof minus = "Minus";
%typeof hi = "Hi";

%typeof functionID = "FunctionID";
%typeof functionID_use = "FunctionIDUse";
%typeof argumentID = "ArgumentID";
%typeof argumentID_use = "ArgumentIDUse";
%typeof argumentID_uselist = "List";
%typeof id_use = "IdUse";
%typeof id_decl = "IdDecl";
%typeof nbr = "Nbr";



%goal program;

program = function_list.a {: return new Program(a); :};
function = INT functionID.a LEFTPARA RIGHTPARA LEFTCURLYBRACE RIGHTCURLYBRACE {: return new Function(a,new Opt(),new Opt()); :}
			| INT functionID.a LEFTPARA RIGHTPARA LEFTCURLYBRACE expr_list.b RIGHTCURLYBRACE {: return new Function(a,new Opt(), new Opt(b)); :}
			| INT functionID.a LEFTPARA argument_list.b RIGHTPARA LEFTCURLYBRACE RIGHTCURLYBRACE {: return new Function(a, new Opt(b), new Opt()); :}
			| INT functionID.a LEFTPARA argument_list.b RIGHTPARA LEFTCURLYBRACE expr_list.c RIGHTCURLYBRACE {: return new Function(a, new Opt(b), new Opt(c)); :};			
function_list = function.a {: return new List().add(a); :} 
				| function_list.a function.b {: return a.add(b); :};
argument = INT argumentID.a {: return new Argument(a); :};
argument_list = argument.a {: return new List().add(a); :}
				| argument_list.a COMMA argument.b {: return a.add(b); :};


expr = declr | binding | if | while | else | returnstmt | functioncallstmt;
expr_list = expr.a {: return new List().add(a); :} 
			| expr_list.a expr.b {: return a.add(b); :};
declr = INT id_decl.a SEMICOLON {: return new Declaration(a, new Opt()); :} 
		| INT id_decl.a ASSIGN hi.b SEMICOLON{: return new Declaration(a,new Opt(b)); :};
binding = id_use.a ASSIGN hi.b SEMICOLON {: return new Binding(a,b); :};
functioncallstmt = functioncall.a SEMICOLON {: return new FunctionCallStmt(a); :};
if = IF LEFTPARA hi.a RIGHTPARA LEFTCURLYBRACE RIGHTCURLYBRACE {: return new If(a,new Opt(),new Opt()); :}
		| IF LEFTPARA hi.a RIGHTPARA LEFTCURLYBRACE expr_list.b RIGHTCURLYBRACE {: return new If(a,new Opt(b),new Opt()); :}
		| IF LEFTPARA hi.a RIGHTPARA LEFTCURLYBRACE RIGHTCURLYBRACE else.b{:return new If(a,new Opt(),new Opt(b)); :}
		| IF LEFTPARA hi.a RIGHTPARA LEFTCURLYBRACE expr_list.b RIGHTCURLYBRACE else.c{:return new If(a,new Opt(b),new Opt(c)); :};
while = WHILE LEFTPARA hi.a RIGHTPARA LEFTCURLYBRACE RIGHTCURLYBRACE {: return new While(a,new Opt()); :}
		| WHILE LEFTPARA hi.a RIGHTPARA LEFTCURLYBRACE expr_list.b RIGHTCURLYBRACE {: return new While(a,new Opt(b)); :};
returnstmt = RETURN hi.a SEMICOLON {: return new ReturnState(a); :};
else = ELSE LEFTCURLYBRACE RIGHTCURLYBRACE {: return new Else(new Opt()); :}
		| ELSE LEFTCURLYBRACE expr_list.b RIGHTCURLYBRACE {: return new Else(new Opt(b)); :};

hi = compare|term;
term =  sum | sub | lowprio;
functioncall = functionID_use.a LEFTPARA RIGHTPARA {: return new FunctionCall(a, new Opt()); :}
				| functionID_use.a LEFTPARA argumentID_uselist.b RIGHTPARA {: return new FunctionCall(a, new Opt(b)); :};
variable = nbr | id_use | functioncall;
sum = term.a ADD term.b{:return new Sum(a,b); :};
sub = term.a MINUS term.b{:return new Sub(a,b); :};

lowprio = variable | mul | div | mod | firstprio | minus;
mul = lowprio.a MUL lowprio.b{:return new Mul(a,b); :};
div = lowprio.a DIV lowprio.b{:return new Div(a,b); :};
mod = lowprio.a MOD lowprio.b{:return new Mod(a,b); :};

firstprio = LEFTPARA hi.a RIGHTPARA{: return new Firstprio(a); :};

minus = MINUS hi.a {:return new Minus(a); :}; 
compare = equals | notequals | lessthan | lessthaneqaul | greaterthan | greaterthanequal; 
equals = term.a EQUALS term.b {: return new Equals(a,b); :};
notequals = term.a NOTEQUALS term.b {: return new NotEquals(a,b); :};
lessthan = term.a LESSTHAN term.b {: return new LessThan(a,b); :};
lessthaneqaul = term.a LESSTHANEQUAL term.b {: return new LessThanEqual(a,b); :};
greaterthan = term.a GREATERTHAN term.b {: return new GreaterThan(a,b); :};
greaterthanequal = term.a GREATERTHANEQUAL term.b {: return new GreaterThanEqual(a,b); :};

nbr = NUM.a{: return new Nbr(a); :};
id_use = ID.id {: return new IdUse(id); :} ;
functionID = ID.id {: return new FunctionID(id); :};
functionID_use = ID.id {: return new FunctionIDUse(id); :};
argumentID = ID.id {: return new ArgumentID(id); :};
argumentID_use = hi.id {: return new ArgumentIDUse(id); :};
argumentID_uselist = argumentID_use.a {: return new List().add(a); :}
					| argumentID_uselist.a COMMA argumentID_use.b {: return a.add(b); :};
id_decl = ID.id {: return new IdDecl(id); :} ;
