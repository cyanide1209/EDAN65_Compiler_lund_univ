aspect CodeGen{
    public void Program.genCode(PrintStream out) {
        out.println(".global _start");
        // etc.
        out.println(".data");
        out.println("buf: .skip 1024");
        out.println(".text");
        out.println("_start:");
        // call main function
        out.println("        call main");

        // call sys_exit
        out.println("        movq $0, %rdi");
        out.println("        movq $60, %rax");
        out.println("        syscall");
        
        // helper procedures (print/read)
        out.println("# Procedure to print number to stdout.");
        out.println("# C signature: void print(long int)");
        out.println("print:");
        out.println("        pushq %rbp");
        out.println("        movq %rsp, %rbp");
        out.println("        ### Convert integer to string (itoa).");
        out.println("        movq 16(%rbp), %rax");
        out.println("        leaq buf(%rip), %rsi    # RSI = write pointer (starts at end of buffer)");
        out.println("        addq $1023, %rsi");
        out.println("        movb $0x0A, (%rsi)      # insert newline");
        out.println("        movq $1, %rcx           # RCX = string length");
        out.println("        cmpq $0, %rax");
        out.println("        jge itoa_loop");
        out.println("        negq %rax               # negate to make RAX positive");
        out.println("itoa_loop:                      # do.. while (at least one iteration)");
        out.println("        movq $10, %rdi");
        out.println("        cqo                     # sign extend RAX to RDX to prepare for idiv");
        out.println("        idivq %rdi              # divide RDX:RAX by 10");
        out.println("        addb $0x30, %dl         # remainder + '0'");
        out.println("        decq %rsi               # move string pointer");
        out.println("        movb %dl, (%rsi)");
        out.println("        incq %rcx               # increment string length");
        out.println("        cmpq $0, %rax");
        out.println("        jg itoa_loop            # produce more digits");
        out.println("itoa_done:");
        out.println("        movq 16(%rbp), %rax");
        out.println("        cmpq $0, %rax");
        out.println("        jge print_end");
        out.println("        decq %rsi");
        out.println("        incq %rcx");
        out.println("        movb $0x2D, (%rsi)");
        out.println("print_end:");
        out.println("        movq $1, %rdi");
        out.println("        movq %rcx, %rdx");
        out.println("        movq $1, %rax");
        out.println("        syscall");
        out.println("        popq %rbp");
        out.println("        ret");
        out.println("");
        out.println("# Procedure to read number from stdin.");
        out.println("# C signature: long long int read(void)");
        out.println("read:");
        out.println("        pushq %rbp");
        out.println("        movq %rsp, %rbp");
        out.println("        ### R9  = sign");
        out.println("        movq $1, %r9            # sign <- 1");
        out.println("        ### R10 = sum");
        out.println("        movq $0, %r10           # sum <- 0");
        out.println("skip_ws: # skip any leading whitespace");
        out.println("        movq $0, %rdi");
        out.println("        leaq buf(%rip), %rsi");
        out.println("        movq $1, %rdx");
        out.println("        movq $0, %rax");
        out.println("        syscall                 # get one char: sys_read(0, buf, 1)");
        out.println("        cmpq $0, %rax");
        out.println("        jle atoi_done           # nchar <= 0");
        out.println("        movb (%rsi), %cl        # c <- current char");
        out.println("        cmp $32, %cl");
        out.println("        je skip_ws              # c == space");
        out.println("        cmp $13, %cl");
        out.println("        je skip_ws              # c == CR");
        out.println("        cmp $10, %cl");
        out.println("        je skip_ws              # c == NL");
        out.println("        cmp $9, %cl");
        out.println("        je skip_ws              # c == tab");
        out.println("        cmp $45, %cl            # check if negative");
        out.println("        jne atoi_loop");
        out.println("        movq $-1, %r9           # sign <- -1");
        out.println("        movq $0, %rdi");
        out.println("        leaq buf(%rip), %rsi");
        out.println("        movq $1, %rdx");
        out.println("        movq $0, %rax");
        out.println("        syscall                 # get one char: sys_read(0, buf, 1)");
        out.println("atoi_loop:");
        out.println("        cmpq $0, %rax           # while (nchar > 0)");
        out.println("        jle atoi_done           # leave loop if nchar <= 0");
        out.println("        movzbq (%rsi), %rcx     # move byte, zero extend to quad-word");
        out.println("        cmpq $0x30, %rcx        # test if < '0'");
        out.println("        jl atoi_done            # character is not numeric");
        out.println("        cmpq $0x39, %rcx        # test if > '9'");
        out.println("        jg atoi_done            # character is not numeric");
        out.println("        imulq $10, %r10         # multiply sum by 10");
        out.println("        subq $0x30, %rcx        # value of character");
        out.println("        addq %rcx, %r10         # add to sum");
        out.println("        movq $0, %rdi");
        out.println("        leaq buf(%rip), %rsi");
        out.println("        movq $1, %rdx");
        out.println("        movq $0, %rax");
        out.println("        syscall                 # get one char: sys_read(0, buf, 1)");
        out.println("        jmp atoi_loop           # loop back");
        out.println("atoi_done:");
        out.println("        imulq %r9, %r10         # sum *= sign");
        out.println("        movq %r10, %rax         # put result value in RAX");
        out.println("        popq %rbp");
        out.println("        ret");
        out.println();
        out.println("print_string:");
        out.println("        pushq %rbp");
        out.println("        movq %rsp, %rbp");
        out.println("        movq $1, %rdi");
        out.println("        movq 16(%rbp), %rsi");
        out.println("        movq 24(%rbp), %rdx");
        out.println("        movq $1, %rax");
        out.println("        syscall");
        out.println("        popq %rbp");
        out.println("        ret");

        for (Function f: getFunctions()) {
            f.genCode(out);
        }
    }

    public void Function.genCode(PrintStream out) {
        //out.println("# Function " + getIdDecl());
        // out.println("# C signature: " + getSignature());
        out.println(getIdDecl().getID() + ":");
        out.println("        pushq %rbp");
        out.println("        movq %rsp, %rbp");
        out.println("        subq $" + (getStatements().numLocals() * 8) + ", %rsp");
        for (int i = 0; i < getNumArgument(); i++) {
            out.println("        movq " + (16 + 8 * i) + "(%rbp), %rax");
            out.println("        movq %rax, " + (-8 * (i + 1)) + "(%rbp)");
        }
        for (Statement s: getStatements()) {
            s.genCode(out);
        }
        out.println("        movq $0, %rax");
        out.println("        leave");
        out.println("        ret");
        out.println();
    }

    abstract public void Statement.genCode(PrintStream out);

    public void Binding.genCode(PrintStream out){
        getExpression().genCode(out);
        out.println("        movq %rax, " + getIdUse().decl().UniqueName());
    }

    public void Declaration.genCode(PrintStream out){
        if(hasExpression()){
            getExpression().genCode(out);
            out.println("        movq %rax, " + getIdDecl().UniqueName());
        }
        else {
            out.println("        movq $0, " + getIdDecl().UniqueName());
        }
    }

    public void ReturnState.genCode(PrintStream out){
        getExpression().genCode(out);
        out.println("        movq %rax, %rbp");
    }

    public void FunctionCallStmt.genCode(PrintStream out){
        getFunctionCall().genCode(out);
    }

    public void If.genCode(PrintStream out){
        getExpression().genCode(out);
        out.print("else"+  "\n");
        out.println("if" +  ":");
        for (Statement s: getStatements()) {
            s.genCode(out);
        }
        out.println("       jmp fi" );
        out.println("else"  + ":");
        if(hasElse()){
            getElse().genCode(out);
        }
        out.println("fi"  + ":");
    }

    public void While.genCode(PrintStream out){
        out.println("while"  + ":");
        getExpression().genCode(out);
        out.print("end" + "\n");
        for (Statement s: getStatements()) {
            s.genCode(out);
        }
        out.println("       jmp while" );
        out.println("fi"  + ":");
    }

    public void Else.genCode(PrintStream out){
        for (Statement s: getStatements()) {
            s.genCode(out);
        }
    }

    abstract public void Expression.genCode(PrintStream out);

    public void BinaryExpression.genCode(PrintStream out){
    }

    public void Comparison.genCode(PrintStream out){
    }

    public void FunctionCall.genCode(PrintStream out){
        for(Expression e : getExpressions()) {
            e.genCode(out);
            out.println("        pushq %rax");
        }

        out.println("        call " + getIdUse().getID());

        for(Expression e : getExpressions()) {
            out.println("        popq %rbx");
        }
    }

    public void Equals.genCode(PrintStream out) {
        getLeft().genCode(out);
        out.println("        pushq %rax");
        getRight().genCode(out);
        out.println("        movq %rax, %rbx");
        out.println("        popq %rax");
        out.println("        cmpq %rbx, %rax");
        out.print("       jne ");
    }

    public void NotEquals.genCode(PrintStream out) {
        getLeft().genCode(out);
        out.println("        pushq %rax");
        getRight().genCode(out);
        out.println("        movq %rax, %rbx");
        out.println("        popq %rax");
        out.println("        cmpq %rbx, %rax");
        out.print("       je ");
    }

    public void GreaterThan.genCode(PrintStream out) {
        getLeft().genCode(out);
        out.println("        pushq %rax");
        getRight().genCode(out);
        out.println("        movq %rax, %rbx");
        out.println("        popq %rax");
        out.println("        cmpq %rbx, %rax");
        out.print("       jle ");
    }

    public void GreaterThanEqual.genCode(PrintStream out) {
        getLeft().genCode(out);
        out.println("        pushq %rax");
        getRight().genCode(out);
        out.println("        movq %rax, %rbx");
        out.println("        popq %rax");
        out.println("        cmpq %rbx, %rax");
        out.print("       jl ");
    }

    public void LessThan.genCode(PrintStream out) {
        getLeft().genCode(out);
        out.println("        pushq %rax");
        getRight().genCode(out);
        out.println("        movq %rax, %rbx");
        out.println("        popq %rax");
        out.println("        cmpq %rbx, %rax");
        out.print("       jge ");
    }

    public void LessThanEqual.genCode(PrintStream out) {
        getLeft().genCode(out);
        out.println("        pushq %rax");
        getRight().genCode(out);
        out.println("        movq %rax, %rbx");
        out.println("        popq %rax");
        out.println("        cmpq %rbx, %rax");
        out.print("       jg ");
    }

    public void Sum.genCode(PrintStream out){
        getLeft().genCode(out);
        out.println("        pushq %rax");
        getRight().genCode(out);
        out.println("        movq %rax, %rbx");
        out.println("        popq %rax");
        out.println("        addq %rbx, %rax");
    }

    public void Sub.genCode(PrintStream out){
        getLeft().genCode(out);
        out.println("        pushq %rax");
        getRight().genCode(out);
        out.println("        movq %rax, %rbx");
        out.println("        popq %rax");
        out.println("        subq %rbx, %rax");
    }

    public void Mul.genCode(PrintStream out){
        getLeft().genCode(out);
        out.println("        pushq %rax");
        getRight().genCode(out);
        out.println("        movq %rax, %rbx");
        out.println("        popq %rax");
        out.println("        imulq %rbx, %rax");
    }

    public void Div.genCode(PrintStream out){
        getLeft().genCode(out);
        out.println("        pushq %rax");
        getRight().genCode(out);
        out.println("        movq %rax, %rbx");
        out.println("        popq %rax");
        out.println("        movqq %0, %rdx");
        out.println("        idivq %rbx, %rdx");
    }

    public void Mod.genCode(PrintStream out){
        getLeft().genCode(out);
        out.println("        pushq %rax");
        getRight().genCode(out);
        out.println("        movq %rax, %rbx");
        out.println("        popq %rax");
        out.println("        movqq %0, %rdx");
        out.println("        idivq %rbx, %rdx");
        out.println("        movq %rax, %rbx");
    }

    public void Minus.genCode(PrintStream out){
        getExpression().genCode(out);
        out.println("        negq %rax");
    }

    public void Parenthesis.genCode(PrintStream out){
        getExpression().genCode(out);
    }

    public void Nbr.genCode(PrintStream out){
        out.println("\t movq $" + getNUM() + ", %rax");
    }
    
    public void IdUse.genCode(PrintStream out){
        out.println("\t movq " + getID() + ", %rax");
    }

    public void IdDecl.genCode(PrintStream out){
        out.println("\t movq " + UniqueName() + ", %rax");
    }

  syn String IdDecl.address() = "-"+(localIndex()*8)+"(%rbp)";

  syn int ASTNode.numLocals() = lastNode().localIndex() - localIndex();

  syn int ASTNode.localIndex() = prevNode().localIndex();
  eq Function.localIndex() = 0;
  eq IdDecl.localIndex() = prevNode().localIndex() + 1;

  inh ASTNode ASTNode.prevNode();
  eq ASTNode.getChild(int i).prevNode() = prevNode(i);
  syn ASTNode ASTNode.lastNode() = prevNode(getNumChild());
  syn ASTNode ASTNode.prevNode(int i) = i>0 ? getChild(i-1).lastNode() : this;

}
