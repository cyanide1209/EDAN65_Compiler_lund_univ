plugins {
  id 'java'
  id 'idea'
  id 'org.jastadd' version '1.14.1'
}

defaultTasks 'test'

// Specify where to look for dependencies like Beaver, JFlex:
repositories.mavenCentral()

// Dependencies are Jar files needed to compile and generate the compiler.
dependencies {
  testImplementation 'junit:junit:4.13.2'
  jastadd2 "org.jastadd:jastadd:2.3.6" // Selects which JastAdd version to use (optional).
}

// Needed to work with old DrAST versions.
compileJava.sourceCompatibility = compileJava.targetCompatibility = "1.8"
compileJava.options.encoding = compileTestJava.options.encoding = 'UTF-8'

// This specifies where the source code is located:
sourceSets {
  main.java.srcDirs = [ 'src/java', 'src/gen' ]
  test.java.srcDirs = [ 'src/test' ]
}

// Configuration for the test running.
test {
  // Log passed/failed tests in the console (see also build/reports/tests):
  testLogging.events 'passed', 'failed'

  testLogging.exceptionFormat = 'full' // Full error output for test failures.

  dependsOn 'cleanTest'  // This causes tests to always be re-run.
}

// Configuration for the generated Jar file.
jar {
  // The Main-Class attribute specifies which class should be run when by java -jar compiler.jar.
  manifest.attributes 'Main-Class': 'lang.Compiler'
  destinationDirectory = projectDir  // Gradle by default puts the Jar in build/libs/.
  archiveFileName = 'compiler.jar'

  // The following from-specification includes all dependencies in compiler.jar
  // so that it can be run as a separate program easily.
  // This is needed because the Beaver runtime classes are otherwise not included.
  // Source: https://www.mkyong.com/gradle/gradle-create-a-jar-file-with-dependencies/
  from { configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) } }
}

// Before compiling, we should generate some Java code:
compileJava.dependsOn 'generateJava'

task generateJava(type: org.jastadd.JastAddTask) {
  description 'Generates the compiler AST classes from JastAdd specifications.'
  outputDir = file('src/gen')
  sources = fileTree(dir: 'src/jastadd', includes: [ '**/*.jrag', '**/*.jadd', '**/*.ast' ])
  options = [ '--package=lang.ast', '--cache=all' ]
}

// The following makes the clean task also remove generated code:
clean.dependsOn 'cleanGeneratedJava'

task cleanGeneratedJava(type: Delete) {
  description 'Remove generated Java code.'
  delete file('src/gen')
}

// Makes the clean task remove the generated compiler.jar file:
clean.dependsOn 'cleanJarfile'

task cleanJarfile(type: Delete) {
  description 'Remove generated jar file'
  delete file('compiler.jar')
}
